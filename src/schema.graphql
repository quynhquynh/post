type Query {
  info: String!
  feed(
    filter: String
    skip: Int
    first: Int
    orderBy: LinkOrderByInput
    after: String
  ): Feed!
  link(id: ID!): Link
  users: [User!]!
  allVotes: [Vote!]!
}

scalar Upload

type Mutation {
  post(title: String!, description: String!, tags: String, file: Upload!): Link
  # post(title: String!, description: String!, tags: String): Link
  # updateLink(id: ID!, url: String, description: String): Link
  deleteLink(id: ID!): BatchPayload
  signup(email: String!, password: String!, name: String!): User
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote
  removeVotesByUsers: BatchPayload
  removeAllUsers: BatchPayload
  removeLinkWithNullUser: BatchPayload
}

type User @cacheControl(maxAge: 100) {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
  votes: [Vote!]!
}

type Feed {
  links: [Link!]!
  count: Int!
}

type Link @cacheControl(maxAge: 240) {
  id: ID!
  title: String!
  description: String!
  fileUrl: String!
  postedBy: User
  votes: [Vote!]! @cacheControl(maxAge: 30)
  tags: [String!]!
  createdAt: String!
}

type AuthPayload {
  token: String
  user: User
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

scalar Long
type BatchPayload {
  count: Long
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
) on OBJECT | FIELD_DEFINITION

enum CacheControlScope {
  PUBLIC
  PRIVATE
}
